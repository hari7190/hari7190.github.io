<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-19T23:56:54-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hari Muraleedharan</title><subtitle></subtitle><entry><title type="html">ColdFusion apps into J2EE containers</title><link href="http://localhost:4000/coldfusion/deployment/2023/07/14/coldfusion-deployment.html" rel="alternate" type="text/html" title="ColdFusion apps into J2EE containers" /><published>2023-07-14T00:09:59-04:00</published><updated>2023-07-14T00:09:59-04:00</updated><id>http://localhost:4000/coldfusion/deployment/2023/07/14/coldfusion-deployment</id><content type="html" xml:base="http://localhost:4000/coldfusion/deployment/2023/07/14/coldfusion-deployment.html"><![CDATA[<p>ColdFusion can be deployed to a Tomcat or JBoss kind of web servers</p>

<p>Overview
ColdFusion application server can be of two types, Enterprise and Standard. And it can be deployed in three forms. As a J2EE instance or as a Standalone. In this article we are looking at the steps for deploying it as a J2EE instance AKA like a Java application.</p>

<p>Steps
Download Apache Tomcat server.
Download ColdFusion Application server from Adobe.com. You can get a developer licensed version but might need an account (free) to download.
Start the CF installer and go ahead with steps until it asks you about the configuration. At that point you should select J2EE and then the WAR configuration.
The output will be four folders.
CFIDE
cf_scripts
WEB-INF
META-INF (I almost always ignore this one though)
Unzip and setup Tomcat. Usually unzipping and running start script from bin folder should bring it up. So make sure it is reachable via the browser window.
Stop Tomcat.
Open server.xml file from config folder and add this line inside host tag.</p>
<Context docBase="path/to/docroot" path="contextpath" debug="0" reloadable="true" allowLinking="true">/ </Context>
<p>Copy all the CF folders mentioned in above steps (CFIDE, cf_scripts, WEB-INF) into the root of your project folder
                    projectFolder
                        CFIDE
                        cf_scripts
                        WEB-INF
                        ..other folders</p>

<p>Start Tomcat and tail the catalina logs to see your ColdFusion starting up. 
Now you should be able to reach you app via</p>
<protocol>://<domain>:<port>/<contextpath>
ColdFusion Administrator will be at
<protocol>://<domain>:<port>/<contextpath>/CFIDE/administrator/index.cfm
 
</contextpath></port></domain></protocol></contextpath></port></domain></protocol>]]></content><author><name></name></author><category term="coldfusion" /><category term="deployment" /><summary type="html"><![CDATA[ColdFusion can be deployed to a Tomcat or JBoss kind of web servers]]></summary></entry><entry><title type="html">Voice Control For TV</title><link href="http://localhost:4000/api/2023/07/14/roku-tv-voice-control.html" rel="alternate" type="text/html" title="Voice Control For TV" /><published>2023-07-14T00:09:59-04:00</published><updated>2023-07-14T00:09:59-04:00</updated><id>http://localhost:4000/api/2023/07/14/roku-tv-voice-control</id><content type="html" xml:base="http://localhost:4000/api/2023/07/14/roku-tv-voice-control.html"><![CDATA[<p>[<img src="https://www.commitstrip.com/wp-content/uploads/2020/04/Strip-Covid19-5-650-finalenglish-1.jpg" alt="An old rock in the desert" title="Shiprock, New Mexico by Beau Rogers" />]</p>

<p>Check out <a href="https://www.commitstrip.com/en/2020/04/16/a-story-of-duplicate-code/">Commit Strip</a>. They’re awesome.<br />
 </p>

<p><strong>Overview</strong><br />
This is a super simple implementation using Google speech APIs and a Roku TV. You can use any language. I am using Python today. My objective was to control my Roku TV. I actually tried capturing network traffic from my TV Remote App to TV to find the commands. An easier and better way to do is reading Roku documentation !! They explained it pretty well there.</p>

<p><strong>Environment</strong></p>
<ul>
  <li>Create a environment of Python 3.6 with Anaconda.</li>
  <li>Brew install Portaudio. (Security aspects TBD)</li>
  <li>Then Pip install pyaudio.</li>
  <li>Get speech_recognition and requests lib (if you are making requests that way)</li>
</ul>

<p><strong>Logic</strong></p>
<ul>
  <li>Setup variables for sampling rate, chunk size and mic name. I used following values.<br />
 Sampling rate : 44100<br />
 Chunk Size : 3096<br />
 I was using built in mic so name was ‘Built-in Microphone’.<br />
 You can find the name using either : system_profiler SPAudioDataType or
system_profiler SPUSBDataType to find usb audio devices like dedicated mics.</li>
  <li>Put out a console message indicating program is ready to listen.</li>
  <li>Sample the input and use speech recognition library to reach out to Google to get it processed and convert that to text.</li>
  <li>Pick up the resulting text and look for what you want in there. I looked for if starting with ‘roku’ and ending with one of the commands like ‘play’.</li>
  <li>After this its pretty much basic if-else logic and logging. Then use requests library to make a http post call to TV according to text. It will be like<br />
<code class="language-plaintext highlighter-rouge">$ curl -d '' http://192.168.XXX.X:8060/keypress/XXXXX  </code></li>
</ul>

<p><strong>Code</strong><br />
<a href="https://github.com/hari7190/VoiceControlledRokuTv">GitHub Repo here. (Quick dirty code. Clean up TBD.)</a></p>

<p><strong>Path forward</strong><br />
Deploy this into a RaspberryPi.
Make it offline. Now it uses Google Speech API. Since there are only a few commands, it should be easy to setup a model and teach it. Deploy that in one of the home servers for Pi to talk to.</p>]]></content><author><name></name></author><category term="api" /><summary type="html"><![CDATA[[]]]></summary></entry></feed>